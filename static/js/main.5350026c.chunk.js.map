{"version":3,"sources":["components/Form.js","components/Todo.js","components/List.js","App.js","index.js"],"names":["Form","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","ref","placeholder","name","onChange","Todo","todoItems","isDone","removeItem","updateItem","editItem","setEditItem","map","todo","index","onClick","List","setTodoItem","length","newItem","newTodos","isComplete","filterTodos","filter","item","newValue","prev","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MA+DeA,EA7DF,SAAAC,GAAU,IAAD,EACQC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IADjD,mBACXC,EADW,KACJC,EADI,KAGZC,EAAWC,iBAAO,MAGxBC,qBAAU,WACNF,EAASG,QAAQC,UAClB,IAGH,IAWMC,EAAe,SAAAC,GAAC,OAAIP,EAASO,EAAEC,OAAOV,QAE5C,OACI,sBAAMW,UAAU,aAAaC,SAdZ,SAAAH,GACjBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACXE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAEVC,EAAS,KAOT,SAEQL,EAAME,KAEE,qCACI,uBACIoB,KAAK,OACLC,IAAKjB,EACLkB,YAAY,kBACZV,UAAU,mBACVX,MAAOC,EACPqB,KAAK,aACLC,SAAUf,IAEd,wBAAQG,UAAU,oBAAlB,0BAGJ,qCACI,uBACIQ,KAAK,OACLC,IAAKjB,EACLkB,YAAY,oBACZV,UAAU,kBACVX,MAAOC,EACPqB,KAAK,aACLC,SAAUf,IAEd,wBAAQG,UAAU,eAAlB,4BCxBba,EA3BF,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAAiB,EAE5B9B,mBAAS,CAAEgB,GAAI,KAAMd,MAAO,KAFA,mBAErD6B,EAFqD,KAE3CC,EAF2C,KAU5D,OAAGD,EAASf,GACD,cAAC,EAAD,CAAMf,KAAM8B,EAAUjB,SANP,SAAAZ,GACtB4B,EAAWC,EAAU7B,GACrB8B,EAAY,CAAChB,GAAI,KAAMd,MAAO,QAO3ByB,EAAUM,KAAI,SAACC,EAAMC,GAAP,OACjB,sBAAKtB,UAAWqB,EAAKN,OAAS,cAAgB,OAA9C,UACI,qBAAmBQ,QAAS,WAAQR,EAAOM,EAAKlB,KAAhD,SACCkB,EAAKd,MADIc,EAAKlB,IAGf,sBAAKH,UAAU,YAAf,UACI,mBAAGA,UAAU,kCAAkCuB,QAAS,kBAAMP,EAAWK,MACzE,mBAAGrB,UAAU,wBAAwBuB,QAAS,kBAAMJ,EAAY,CAAChB,GAAIkB,EAAKlB,GAAId,MAAOgC,EAAKd,eANvCe,OCsCpDE,EApDF,WAAO,IAAD,EAEkBrC,mBAAS,IAF3B,mBAER2B,EAFQ,KAEGW,EAFH,KAuCf,OACI,gCACI,+DACA,cAAC,EAAD,CAAMxB,SArCQ,SAAAoB,GAClB,GAAKA,EAAKd,MAAwB,IAAhBc,EAAKK,OAAvB,CAIA,IAAMC,EAAO,CAAIN,GAAJ,mBAAaP,IAC1BW,EAAYE,OAgCR,cAAC,EAAD,CACIb,UAAWA,EACXC,OA9BG,SAACZ,GACZ,IAAIyB,EAAWd,EAAUM,KAAI,SAAAC,GAIzB,OAHIA,EAAKlB,KAAOA,IACZkB,EAAKQ,YAAcR,EAAKQ,YAErBR,KAEXI,EAAYG,IAwBJZ,WApBe,SAAAK,GACvB,IAAMS,EAAc,YAAIhB,GAAWiB,QAAO,SAAAC,GAAI,OAAIA,EAAK7B,KAAOkB,EAAKlB,MACnEsB,EAAYK,IAmBJb,WAfW,SAACI,EAAMY,GACrBA,GAAgC,IAApBA,EAASP,QAG1BD,GAAY,SAAAS,GAAI,OAAIA,EAAKd,KAAI,SAAAY,GAAI,OAAIA,EAAK7B,KAAOkB,EAAKlB,GAAK8B,EAAWD,eC7B/DG,MARf,WACE,OACE,qBAAKnC,UAAU,MAAf,SACE,cAAC,EAAD,OCFNoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5350026c.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst Form = props => {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    //setting input refernce for in focus input on Load\r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n    }, [])\r\n\r\n    //Function to handle submitting the form\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n        });\r\n        setInput('');\r\n    };\r\n\r\n    //Function to handle input change\r\n    const handleChange = e => setInput(e.target.value)\r\n\r\n    return (\r\n        <form className=\"form-class\" onSubmit={handleSubmit}>\r\n            { //If edit is received in the props,, show the update input\r\n                props.edit ?\r\n                    (\r\n                        <>\r\n                            <input\r\n                                type=\"text\"\r\n                                ref={inputRef}\r\n                                placeholder=\"Update the todo\"\r\n                                className=\"input-class edit\"\r\n                                value={input}\r\n                                name=\"input-text\"\r\n                                onChange={handleChange}\r\n                            />\r\n                            <button className=\"button-class edit\">Edit Item</button>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <input\r\n                                type=\"text\"\r\n                                ref={inputRef}\r\n                                placeholder=\"Add the todo item\"\r\n                                className=\"input-class add\"\r\n                                value={input}\r\n                                name=\"input-text\"\r\n                                onChange={handleChange}\r\n                            />\r\n                            <button className=\"button-class\">Add Item</button>\r\n                        </>\r\n                    )\r\n            }\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React, { useState } from 'react';\r\nimport Form from './Form';\r\n\r\nconst Todo = ({ todoItems, isDone, removeItem, updateItem }) => {\r\n\r\n    const [editItem, setEditItem] = useState({ id: null, value: '' });\r\n\r\n    //Function to update the edited Item in the actual List\r\n    const submitUpdatedList = value => {\r\n        updateItem(editItem, value)\r\n        setEditItem({id: null, value: ''})\r\n    }\r\n\r\n    if(editItem.id) {\r\n        return <Form edit={editItem} onSubmit={submitUpdatedList} /> \r\n    }\r\n\r\n    return todoItems.map((todo, index) => (\r\n        <div className={todo.isDone ? \"todo isdone\" : \"todo\"} key={index} >\r\n            <div key={todo.id} onClick={() => { isDone(todo.id) }}>\r\n            {todo.text}\r\n            </div>\r\n            <div className=\"todo-icon\">\r\n                <i className=\"fas fa-times-circle delete-icon\" onClick={() => removeItem(todo)}></i>\r\n                <i className=\"fas fa-edit edit-icon\" onClick={() => setEditItem({id: todo.id, value: todo.text})}></i>\r\n            </div>\r\n        </div>\r\n    )\r\n    )\r\n}\r\nexport default Todo;","import React, { useState } from 'react';\r\nimport Form from './Form';\r\nimport Todo from './Todo';\r\n\r\nconst List = () => {\r\n\r\n    const [todoItems, setTodoItem] = useState([]);\r\n\r\n    //Function to add items to the todoItems array\r\n    const addItemToList = todo => {\r\n        if (!todo.text || todo.length === 0) {\r\n            return\r\n        }\r\n        //adding the new item to the todoList array\r\n        const newItem = [todo, ...todoItems]\r\n        setTodoItem(newItem)\r\n    }\r\n\r\n    //Function to define if Adding is completed\r\n    const isDone = (id) => {\r\n        let newTodos = todoItems.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete\r\n            }\r\n            return todo\r\n        });\r\n        setTodoItem(newTodos);\r\n    }\r\n\r\n    //deleting item from the Array List\r\n    const removeItemFromList = todo => {\r\n        const filterTodos = [...todoItems].filter(item => item.id !== todo.id)\r\n        setTodoItem(filterTodos)\r\n    }\r\n\r\n    //Function to update the changes to the Array List\r\n    const updateTodoList = (todo, newValue) => {\r\n        if (!newValue || newValue.length === 0) {\r\n            return\r\n        }\r\n        setTodoItem(prev => prev.map(item => item.id === todo.id ? newValue : item))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>What's on your mind? Add them</h1>\r\n            <Form onSubmit={addItemToList} />\r\n            <Todo\r\n                todoItems={todoItems}\r\n                isDone={isDone}\r\n                removeItem={removeItemFromList}\r\n                updateItem={updateTodoList}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default List;","import './App.css';\nimport List from './components/List';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <List />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}